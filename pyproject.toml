[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "homely-homeassistant"
description = "Home Assistant integration for Homely alarm systems"
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
authors = [{name = "Bjarte FlÃ¸ Lode", email = "bjarte@dev.flode.net"}]
keywords = ["homeassistant", "homely", "alarm", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
]
dependencies = [
    "homeassistant>=2025.1.0",
    "pydantic>=2.10.0",
    "python-socketio>=5.10.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.15.0",
    "pytest-homeassistant-custom-component>=0.13.250",
    "ruff>=0.6.0",
    "mypy>=1.17.0",
    "pre-commit>=4.1.0",
    "black>=25.0.0",
    "isort>=6.0.0",
    "flake8>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/bjafl/homely-ha"
Repository = "https://github.com/bjafl/homely-ha"
Issues = "https://github.com/bjafl/homely-ha/issues"

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler is an except block with a catch-all except
    "C",    # complexity
    "D",    # docstrings
    "E",    # pycodestyle
    "F",    # pyflakes/autoflake
    "ICN001", # import conventions; {name} should be imported as {asname}
    "PGH004", # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Combine multiple with statements
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of conditional assignment
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP",   # pyupgrade
    "W",    # pycodestyle
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "D411",  # Missing blank line before section
    "D412",  # No blank lines allowed between a section header and its content
    "D413",  # Missing blank line after last section
    "E501",  # line too long, handled by black
    "E731",  # do not assign a lambda expression, use a def

    # May conflict with formatter
    "COM812",
    "ISC001",
]

# [tool.ruff.lint.flake8-pytest-style]
# fixture-parentheses = false

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["custom_components.homely"]
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]  # Ignore docstring rules in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.13"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
warn_return_any = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = "."
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--cov=custom_components.homely",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-fail-under=85",
    "--cov-report=html",
    "--cov-report=xml",
]
timeout = 300
# filterwarnings = [
#     "ignore::DeprecationWarning",
#     "ignore::PendingDeprecationWarning",
#     "ignore:.*urllib3.*:urllib3.exceptions.InsecureRequestWarning",
#     "ignore::pytest.PytestUnraisableExceptionWarning"
# ]
log_auto_indent = true
log_cli = false
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_level = "INFO"

[tool.coverage.run]
source = ["custom_components/homely"]
omit = [
    "tests/*",
    "custom_components/homely/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
